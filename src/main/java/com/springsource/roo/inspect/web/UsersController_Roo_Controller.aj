// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.inspect.web;

import com.springsource.roo.inspect.domain.Roles;
import com.springsource.roo.inspect.domain.Users;
import com.springsource.roo.inspect.web.UsersController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UsersController_Roo_Controller {
    
    @RequestMapping(value="/{role}",method = RequestMethod.POST, produces = "text/html")
    public String UsersController.create(@Valid Users users, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest,@PathVariable("role") int role) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, users);
            if(role==1){
            return "userses/create";
            }else if(role==0){
            	return "userses/usercreate";
            }
        }
        uiModel.asMap().clear();
        users.persist();
        if(role==1){
        return "redirect:/userses/" + encodeUrlPathSegment(users.getId().toString(), httpServletRequest)+"/1";
        }else if(role==0){
        	return "redirect:/userses/" + encodeUrlPathSegment(users.getId().toString(), httpServletRequest)+"/0";
        }
        return "";
    }
     @RequestMapping(params = "form", produces = "text/html")
    public String UsersController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Users());
        return "userses/create";
    }
     @RequestMapping(params = "userform", produces = "text/html")
    public String UsersController.createUForm(Model uiModel) {
        populateEditForm(uiModel, new Users());
        return "userses/usercreate";
    }
    
    @RequestMapping(value = "/{id}/{role}", produces = "text/html")
    public String UsersController.show(@PathVariable("id") Long id,@PathVariable("role") int role, Model uiModel) {
    	
        uiModel.addAttribute("users", Users.findUsers(id));
        uiModel.addAttribute("itemId", id);
        if(role==1){
        return "userses/show";
        }else if(role==0){
        	return "userses/usershow";
        }
        return "";
    }
   
   @RequestMapping(produces="text/html")
    public String UsersController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size,@RequestParam(value = "role", required = false) Integer role, Model uiModel) {
        if (page != null || size != null) {
        	
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("userses", Users.findUsersEntries(firstResult, sizeNo));
            float nrOfPages = (float) Users.countUserses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("userses", Users.findAllUserses());
        }
         if(role==1){
        	 uiModel.addAttribute("role", 1);
         return "userses/list";
         }else if(role==0){
        	 uiModel.addAttribute("role", 0);
        	 return "userses/userlist";
         }
         return "";
    }
   
    @RequestMapping(value="/{role}",method = RequestMethod.PUT, produces = "text/html")
    public String UsersController.update(@Valid Users users, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest,@PathVariable("role") int role) {
          System.out.println(role+"update");
    	if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, users);
            if(role==1){
            return "userses/update";
            }else if(role==0){
            	return "useres/userupdate";
            }
            return "";
        }
        uiModel.asMap().clear();
        users.merge();
        if(role==1){
        return "redirect:/userses/" + encodeUrlPathSegment(users.getId().toString(), httpServletRequest)+"/1";
        }else if(role==0){
        	 return "redirect:/userses/" + encodeUrlPathSegment(users.getId().toString(), httpServletRequest)+"/0";
        }
        return "";
        }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String UsersController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Users.findUsers(id));
        return "userses/update";
    }
    @RequestMapping(value = "/{id}", params = "userform", produces = "text/html")
    public String UsersController.updateUForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Users.findUsers(id));
        return "userses/userupdate";
    }
    

    @RequestMapping(value = "/{id}/{role}", method = RequestMethod.DELETE, produces = "text/html")
    public String UsersController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size,@PathVariable("role") int role, Model uiModel) {
        System.out.println(role+"角色");
    	Users users = Users.findUsers(id);
        users.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
       
        if(role==1){
        uiModel.addAttribute("role",1);
        return "redirect:/userses";
        }else if(role==0){
        	uiModel.addAttribute("role",0);
        	return "redirect:/userses";
        }
            return "";
    }
    
    void UsersController.populateEditForm(Model uiModel, Users users) {
        uiModel.addAttribute("users", users);
        uiModel.addAttribute("roleses", Roles.findAllRoleses());
    }
    
    String UsersController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
